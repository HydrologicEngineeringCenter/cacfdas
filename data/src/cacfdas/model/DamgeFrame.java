/*
 * DamgeFrame.java
 *
 * Created on April 4, 2006, 10:40 AM
 */

package cacfdas.model;

import java.util.*;
import java.io.*;
import java.text.*;
import java.util.prefs.*;

import javax.swing.*;
import javax.swing.text.*;

import cacfdas.*;
import cacfdas.reachinfo.*;
import cacfdas.exception.*;
import cacfdas.stagedata.*;
import cacfdas.util.*;


import hec.heclib.util.*;
import hec.heclib.dss.*;

/**
 *
 * @author  b4edhdwj
 */
public class DamgeFrame extends javax.swing.JFrame {
    
    /** Creates new form DamgeFrame */
    public DamgeFrame() {
        initComponents();
        init();
        addFileFilters();
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        fc = new javax.swing.JFileChooser();
        op = new javax.swing.JOptionPane();
        jMainPanel = new javax.swing.JPanel();
        jCropDataPanel = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        jCropInfoField = new javax.swing.JTextField();
        jFloodDamagePanel = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jFloodDamageField = new javax.swing.JTextField();
        jStageDataPanel = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jStageField = new javax.swing.JTextField();
        jYearPanel = new javax.swing.JPanel();
        jLabel4 = new javax.swing.JLabel();
        jStartYearField = new javax.swing.JTextField();
        jPanel5 = new javax.swing.JPanel();
        jLabel5 = new javax.swing.JLabel();
        jStopYearField = new javax.swing.JTextField();
        jSeparator1 = new javax.swing.JSeparator();
        jPanel4 = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel6 = new javax.swing.JLabel();
        jTotalDamageField = new javax.swing.JTextField();
        jPanel9 = new javax.swing.JPanel();
        jLabel7 = new javax.swing.JLabel();
        jAnnualDamageField = new javax.swing.JTextField();
        jPanel8 = new javax.swing.JPanel();
        jLabel8 = new javax.swing.JLabel();
        jNetAADamageField = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jLabel9 = new javax.swing.JLabel();
        jAvgAnnualDamageField = new javax.swing.JTextField();
        jPanel10 = new javax.swing.JPanel();
        jLabel10 = new javax.swing.JLabel();
        jTotalBAField = new javax.swing.JTextField();
        jPanel12 = new javax.swing.JPanel();
        jLabel11 = new javax.swing.JLabel();
        jDamagePerBAField = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jLabel12 = new javax.swing.JLabel();
        jTotalPeakAcresField = new javax.swing.JTextField();
        jPanel14 = new javax.swing.JPanel();
        jLabel13 = new javax.swing.JLabel();
        jDamagePerPeakAcreField = new javax.swing.JTextField();
        jSeparator2 = new javax.swing.JSeparator();
        jRunPanel = new javax.swing.JPanel();
        jRunButton = new javax.swing.JButton();
        jRightBorder = new javax.swing.JPanel();
        jLeftBorder = new javax.swing.JPanel();
        jTopBorder = new javax.swing.JPanel();
        jBottomPanel = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jFileMenu = new javax.swing.JMenu();
        JOpenMenu = new javax.swing.JMenu();
        jCropInfoItem = new javax.swing.JMenuItem();
        jFloodDamageItem = new javax.swing.JMenuItem();
        jStageDataItem = new javax.swing.JMenuItem();
        jSaveMenu = new javax.swing.JMenu();
        jSaveSummaryItem = new javax.swing.JMenuItem();
        jSaveReportItem = new javax.swing.JMenuItem();
        jSaveDebugItem = new javax.swing.JMenuItem();
        jModleMenu = new javax.swing.JMenu();
        jTableEditMenu = new javax.swing.JMenu();
        jEditCropMenuItem = new javax.swing.JMenuItem();
        jEditFloodDamageItem = new javax.swing.JMenuItem();
        jEditStageDataItem = new javax.swing.JMenuItem();
        jSummaryItem = new javax.swing.JMenuItem();
        jYearResultsItem = new javax.swing.JMenuItem();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("CACFDAS");
        setResizable(false);
        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jMainPanel.setLayout(new javax.swing.BoxLayout(jMainPanel, javax.swing.BoxLayout.Y_AXIS));

        jCropDataPanel.setLayout(new javax.swing.BoxLayout(jCropDataPanel, javax.swing.BoxLayout.X_AXIS));

        jCropDataPanel.setMaximumSize(new java.awt.Dimension(32767, 25));
        jCropDataPanel.setMinimumSize(new java.awt.Dimension(10, 25));
        jCropDataPanel.setPreferredSize(new java.awt.Dimension(10, 25));
        jLabel1.setText("Crop Info File");
        jLabel1.setMaximumSize(new java.awt.Dimension(120, 14));
        jLabel1.setMinimumSize(new java.awt.Dimension(120, 14));
        jLabel1.setPreferredSize(new java.awt.Dimension(120, 14));
        jCropDataPanel.add(jLabel1);

        jPanel1.setMaximumSize(new java.awt.Dimension(32767, 20));
        jPanel1.setMinimumSize(new java.awt.Dimension(10, 20));
        jPanel1.setPreferredSize(new java.awt.Dimension(10, 20));
        jCropDataPanel.add(jPanel1);

        jCropInfoField.setMaximumSize(new java.awt.Dimension(2147483647, 20));
        jCropDataPanel.add(jCropInfoField);

        jMainPanel.add(jCropDataPanel);

        jFloodDamagePanel.setLayout(new javax.swing.BoxLayout(jFloodDamagePanel, javax.swing.BoxLayout.X_AXIS));

        jFloodDamagePanel.setMaximumSize(new java.awt.Dimension(32767, 25));
        jFloodDamagePanel.setMinimumSize(new java.awt.Dimension(10, 25));
        jFloodDamagePanel.setOpaque(false);
        jFloodDamagePanel.setPreferredSize(new java.awt.Dimension(10, 25));
        jLabel2.setText("Budget File");
        jLabel2.setMaximumSize(new java.awt.Dimension(120, 14));
        jLabel2.setMinimumSize(new java.awt.Dimension(120, 14));
        jLabel2.setPreferredSize(new java.awt.Dimension(120, 14));
        jFloodDamagePanel.add(jLabel2);

        jPanel3.setMaximumSize(new java.awt.Dimension(20, 32767));
        jFloodDamagePanel.add(jPanel3);

        jFloodDamageField.setMaximumSize(new java.awt.Dimension(2147483647, 20));
        jFloodDamagePanel.add(jFloodDamageField);

        jMainPanel.add(jFloodDamagePanel);

        jStageDataPanel.setLayout(new javax.swing.BoxLayout(jStageDataPanel, javax.swing.BoxLayout.X_AXIS));

        jStageDataPanel.setMaximumSize(new java.awt.Dimension(32767, 25));
        jStageDataPanel.setMinimumSize(new java.awt.Dimension(10, 25));
        jStageDataPanel.setPreferredSize(new java.awt.Dimension(10, 25));
        jLabel3.setText("Stage File");
        jLabel3.setMaximumSize(new java.awt.Dimension(120, 14));
        jLabel3.setMinimumSize(new java.awt.Dimension(120, 14));
        jLabel3.setPreferredSize(new java.awt.Dimension(120, 14));
        jStageDataPanel.add(jLabel3);

        jStageDataPanel.add(jPanel2);

        jStageField.setMaximumSize(new java.awt.Dimension(2147483647, 20));
        jStageDataPanel.add(jStageField);

        jMainPanel.add(jStageDataPanel);

        jYearPanel.setLayout(new javax.swing.BoxLayout(jYearPanel, javax.swing.BoxLayout.X_AXIS));

        jYearPanel.setMaximumSize(new java.awt.Dimension(32767, 30));
        jYearPanel.setMinimumSize(new java.awt.Dimension(10, 30));
        jYearPanel.setPreferredSize(new java.awt.Dimension(10, 30));
        jLabel4.setText("Start Year");
        jLabel4.setMaximumSize(new java.awt.Dimension(70, 14));
        jLabel4.setMinimumSize(new java.awt.Dimension(70, 14));
        jLabel4.setOpaque(true);
        jLabel4.setPreferredSize(new java.awt.Dimension(70, 14));
        jYearPanel.add(jLabel4);

        jStartYearField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jStartYearField.setMaximumSize(new java.awt.Dimension(80, 20));
        jStartYearField.setMinimumSize(new java.awt.Dimension(80, 20));
        jStartYearField.setPreferredSize(new java.awt.Dimension(80, 20));
        jStartYearField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                integerFilter(evt);
            }
        });

        jYearPanel.add(jStartYearField);

        jYearPanel.add(jPanel5);

        jLabel5.setText("Stop Year");
        jLabel5.setMaximumSize(new java.awt.Dimension(70, 14));
        jLabel5.setMinimumSize(new java.awt.Dimension(70, 14));
        jLabel5.setPreferredSize(new java.awt.Dimension(70, 14));
        jYearPanel.add(jLabel5);

        jStopYearField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jStopYearField.setMaximumSize(new java.awt.Dimension(80, 20));
        jStopYearField.setMinimumSize(new java.awt.Dimension(80, 20));
        jStopYearField.setPreferredSize(new java.awt.Dimension(80, 20));
        jStopYearField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                integerFilter(evt);
            }
        });

        jYearPanel.add(jStopYearField);

        jMainPanel.add(jYearPanel);

        jSeparator1.setFocusCycleRoot(true);
        jSeparator1.setMaximumSize(new java.awt.Dimension(32767, 5));
        jSeparator1.setMinimumSize(new java.awt.Dimension(0, 5));
        jSeparator1.setPreferredSize(new java.awt.Dimension(0, 5));
        jMainPanel.add(jSeparator1);

        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.Y_AXIS));

        jPanel4.setMaximumSize(new java.awt.Dimension(32767, 175));
        jPanel4.setMinimumSize(new java.awt.Dimension(10, 175));
        jPanel4.setPreferredSize(new java.awt.Dimension(10, 175));
        jPanel7.setLayout(new javax.swing.BoxLayout(jPanel7, javax.swing.BoxLayout.X_AXIS));

        jPanel7.setMaximumSize(new java.awt.Dimension(33077, 25));
        jPanel7.setMinimumSize(new java.awt.Dimension(320, 25));
        jPanel7.setPreferredSize(new java.awt.Dimension(320, 25));
        jLabel6.setText("Total Damage");
        jLabel6.setMaximumSize(new java.awt.Dimension(80, 14));
        jLabel6.setMinimumSize(new java.awt.Dimension(80, 14));
        jLabel6.setPreferredSize(new java.awt.Dimension(80, 14));
        jPanel7.add(jLabel6);

        jTotalDamageField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTotalDamageField.setMaximumSize(new java.awt.Dimension(70, 19));
        jTotalDamageField.setMinimumSize(new java.awt.Dimension(70, 19));
        jTotalDamageField.setPreferredSize(new java.awt.Dimension(70, 19));
        jPanel7.add(jTotalDamageField);

        jPanel9.setMaximumSize(new java.awt.Dimension(32767, 19));
        jPanel7.add(jPanel9);

        jLabel7.setText("Annual Damage");
        jLabel7.setMaximumSize(new java.awt.Dimension(90, 14));
        jLabel7.setMinimumSize(new java.awt.Dimension(90, 14));
        jLabel7.setPreferredSize(new java.awt.Dimension(90, 14));
        jPanel7.add(jLabel7);

        jAnnualDamageField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jAnnualDamageField.setMaximumSize(new java.awt.Dimension(70, 19));
        jAnnualDamageField.setMinimumSize(new java.awt.Dimension(70, 19));
        jAnnualDamageField.setPreferredSize(new java.awt.Dimension(70, 19));
        jPanel7.add(jAnnualDamageField);

        jPanel4.add(jPanel7);

        jPanel8.setLayout(new javax.swing.BoxLayout(jPanel8, javax.swing.BoxLayout.X_AXIS));

        jPanel8.setMaximumSize(new java.awt.Dimension(32767, 25));
        jPanel8.setMinimumSize(new java.awt.Dimension(10, 25));
        jPanel8.setPreferredSize(new java.awt.Dimension(10, 25));
        jLabel8.setText("Net Annual Acres Damaged");
        jLabel8.setMaximumSize(new java.awt.Dimension(180, 14));
        jLabel8.setMinimumSize(new java.awt.Dimension(180, 14));
        jLabel8.setPreferredSize(new java.awt.Dimension(180, 14));
        jPanel8.add(jLabel8);

        jNetAADamageField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jNetAADamageField.setMaximumSize(new java.awt.Dimension(2147483647, 19));
        jPanel8.add(jNetAADamageField);

        jPanel4.add(jPanel8);

        jPanel11.setLayout(new javax.swing.BoxLayout(jPanel11, javax.swing.BoxLayout.X_AXIS));

        jPanel11.setMaximumSize(new java.awt.Dimension(2147483647, 25));
        jPanel11.setMinimumSize(new java.awt.Dimension(151, 25));
        jPanel11.setPreferredSize(new java.awt.Dimension(151, 25));
        jLabel9.setText("Avg Annual Damge / Acre");
        jLabel9.setMaximumSize(new java.awt.Dimension(180, 14));
        jLabel9.setMinimumSize(new java.awt.Dimension(180, 14));
        jLabel9.setPreferredSize(new java.awt.Dimension(180, 14));
        jPanel11.add(jLabel9);

        jAvgAnnualDamageField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jAvgAnnualDamageField.setMaximumSize(new java.awt.Dimension(2147483647, 19));
        jPanel11.add(jAvgAnnualDamageField);

        jPanel4.add(jPanel11);

        jPanel10.setLayout(new javax.swing.BoxLayout(jPanel10, javax.swing.BoxLayout.X_AXIS));

        jPanel10.setMaximumSize(new java.awt.Dimension(2147483647, 25));
        jPanel10.setMinimumSize(new java.awt.Dimension(40, 25));
        jLabel10.setText("Total Banded Acres Flooded");
        jLabel10.setMaximumSize(new java.awt.Dimension(180, 14));
        jLabel10.setMinimumSize(new java.awt.Dimension(180, 14));
        jLabel10.setPreferredSize(new java.awt.Dimension(180, 14));
        jPanel10.add(jLabel10);

        jTotalBAField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTotalBAField.setMaximumSize(new java.awt.Dimension(2147483647, 19));
        jPanel10.add(jTotalBAField);

        jPanel4.add(jPanel10);

        jPanel12.setLayout(new javax.swing.BoxLayout(jPanel12, javax.swing.BoxLayout.X_AXIS));

        jPanel12.setMaximumSize(new java.awt.Dimension(2147483647, 25));
        jPanel12.setMinimumSize(new java.awt.Dimension(191, 25));
        jPanel12.setPreferredSize(new java.awt.Dimension(191, 25));
        jLabel11.setText("Damge / Banded Acre Flooded");
        jLabel11.setMaximumSize(new java.awt.Dimension(180, 14));
        jLabel11.setMinimumSize(new java.awt.Dimension(180, 14));
        jLabel11.setPreferredSize(new java.awt.Dimension(180, 14));
        jPanel12.add(jLabel11);

        jDamagePerBAField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jDamagePerBAField.setMaximumSize(new java.awt.Dimension(2147483647, 19));
        jPanel12.add(jDamagePerBAField);

        jPanel4.add(jPanel12);

        jPanel13.setLayout(new javax.swing.BoxLayout(jPanel13, javax.swing.BoxLayout.X_AXIS));

        jPanel13.setMaximumSize(new java.awt.Dimension(32767, 25));
        jPanel13.setMinimumSize(new java.awt.Dimension(10, 25));
        jPanel13.setPreferredSize(new java.awt.Dimension(10, 25));
        jLabel12.setText("Total Acreage in Flood Peaks");
        jLabel12.setMaximumSize(new java.awt.Dimension(180, 19));
        jLabel12.setMinimumSize(new java.awt.Dimension(180, 19));
        jLabel12.setPreferredSize(new java.awt.Dimension(180, 19));
        jPanel13.add(jLabel12);

        jTotalPeakAcresField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jTotalPeakAcresField.setMaximumSize(new java.awt.Dimension(2147483647, 19));
        jPanel13.add(jTotalPeakAcresField);

        jPanel4.add(jPanel13);

        jPanel14.setLayout(new javax.swing.BoxLayout(jPanel14, javax.swing.BoxLayout.X_AXIS));

        jPanel14.setMaximumSize(new java.awt.Dimension(32767, 25));
        jPanel14.setMinimumSize(new java.awt.Dimension(10, 25));
        jPanel14.setPreferredSize(new java.awt.Dimension(10, 25));
        jLabel13.setText("Damage / Peak Acre");
        jLabel13.setMaximumSize(new java.awt.Dimension(180, 19));
        jLabel13.setMinimumSize(new java.awt.Dimension(180, 19));
        jLabel13.setPreferredSize(new java.awt.Dimension(180, 19));
        jPanel14.add(jLabel13);

        jDamagePerPeakAcreField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jDamagePerPeakAcreField.setMaximumSize(new java.awt.Dimension(2147483647, 19));
        jPanel14.add(jDamagePerPeakAcreField);

        jPanel4.add(jPanel14);

        jMainPanel.add(jPanel4);

        jSeparator2.setMaximumSize(new java.awt.Dimension(32767, 5));
        jSeparator2.setMinimumSize(new java.awt.Dimension(0, 5));
        jSeparator2.setPreferredSize(new java.awt.Dimension(0, 5));
        jMainPanel.add(jSeparator2);

        jRunPanel.setLayout(new java.awt.BorderLayout());

        jRunPanel.setMaximumSize(new java.awt.Dimension(32767, 20));
        jRunPanel.setMinimumSize(new java.awt.Dimension(10, 20));
        jRunPanel.setPreferredSize(new java.awt.Dimension(10, 20));
        jRunButton.setText("Run");
        jRunButton.setEnabled(false);
        jRunButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jRunButtonActionPerformed(evt);
            }
        });

        jRunPanel.add(jRunButton, java.awt.BorderLayout.EAST);

        jMainPanel.add(jRunPanel);

        getContentPane().add(jMainPanel, java.awt.BorderLayout.CENTER);

        getContentPane().add(jRightBorder, java.awt.BorderLayout.WEST);

        getContentPane().add(jLeftBorder, java.awt.BorderLayout.EAST);

        getContentPane().add(jTopBorder, java.awt.BorderLayout.NORTH);

        getContentPane().add(jBottomPanel, java.awt.BorderLayout.SOUTH);

        jFileMenu.setMnemonic('f');
        jFileMenu.setText("File");
        JOpenMenu.setMnemonic('o');
        JOpenMenu.setText("Open");
        jCropInfoItem.setText("Crop Info File");
        jCropInfoItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCropInfoItemActionPerformed(evt);
            }
        });

        JOpenMenu.add(jCropInfoItem);

        jFloodDamageItem.setText("Budget File");
        jFloodDamageItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFloodDamageItemActionPerformed(evt);
            }
        });

        JOpenMenu.add(jFloodDamageItem);

        jStageDataItem.setText("Stage Data File");
        jStageDataItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jStageDataItemActionPerformed(evt);
            }
        });

        JOpenMenu.add(jStageDataItem);

        jFileMenu.add(JOpenMenu);

        jSaveMenu.setText("Menu");
        jSaveMenu.setEnabled(false);
        jSaveSummaryItem.setText("Summary Report");
        jSaveSummaryItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSaveSummaryItemActionPerformed(evt);
            }
        });

        jSaveMenu.add(jSaveSummaryItem);

        jSaveReportItem.setText("Year Report");
        jSaveReportItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSaveReportItemActionPerformed(evt);
            }
        });

        jSaveMenu.add(jSaveReportItem);

        jSaveDebugItem.setText("Debug Report");
        jSaveDebugItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSaveDebugItemActionPerformed(evt);
            }
        });

        jSaveMenu.add(jSaveDebugItem);

        jFileMenu.add(jSaveMenu);

        jMenuBar1.add(jFileMenu);

        jModleMenu.setMnemonic('M');
        jModleMenu.setText("Model");
        jTableEditMenu.setText("Edit Table");
        jEditCropMenuItem.setText("Crop Info");
        jEditCropMenuItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jEditCropMenuItemActionPerformed(evt);
            }
        });

        jTableEditMenu.add(jEditCropMenuItem);

        jEditFloodDamageItem.setText("Budget");
        jEditFloodDamageItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jEditFloodDamageItemActionPerformed(evt);
            }
        });

        jTableEditMenu.add(jEditFloodDamageItem);

        jEditStageDataItem.setText("Stage Data");
        jEditStageDataItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jEditStageDataItemActionPerformed(evt);
            }
        });

        jTableEditMenu.add(jEditStageDataItem);

        jModleMenu.add(jTableEditMenu);

        jSummaryItem.setText("Summary Results Table");
        jSummaryItem.setEnabled(false);
        jSummaryItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSummaryItemActionPerformed(evt);
            }
        });

        jModleMenu.add(jSummaryItem);

        jYearResultsItem.setText("Year Results Table");
        jYearResultsItem.setEnabled(false);
        jYearResultsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jYearResultsItemActionPerformed(evt);
            }
        });

        jModleMenu.add(jYearResultsItem);

        jMenuBar1.add(jModleMenu);

        setJMenuBar(jMenuBar1);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-360)/2, (screenSize.height-392)/2, 360, 392);
    }//GEN-END:initComponents

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        AbstractDocument doc;
        String s;
        File file;
        
        // handle changes to the crop info data
        file = model.getCropInfoTable().getFile();
        if (file == null )
        { 
            s = "";
        }
        else
        {
            s = file.getAbsolutePath();
        }
        
        if ( model.getCropInfoTable().getCropList().length > 0 )
        {
            cropLoaded = true;
        }
        else
        {
            cropLoaded = false;
        }

        doc = (AbstractDocument) jCropInfoField.getDocument();
        doc. setDocumentFilter(null);
        jCropInfoField.setText(s);        
        doc. setDocumentFilter(new ReadOnlyDocFilter());
        
        // handle changes to the budget cards
        file = model.getFloodDamageTable().getSource();
        
        if (file == null )
        { 
            s = "";
        }
        else
        {
            s = file.getAbsolutePath();
        }
        
        if ( model.getFloodDamageTable().size() > 0 )
        {
            floodLoaded = true;
        }
        else
        {
            floodLoaded = false;
        }

        doc = (AbstractDocument) jFloodDamageField.getDocument();
        doc. setDocumentFilter(null);
        jFloodDamageField.setText(s);        
        doc. setDocumentFilter(new ReadOnlyDocFilter());
        
        //handle changes to the stage data
        file = model.getStageDataTable().getDSSFile();
        
        if ( file == null )
        {
            s = "";
        }
        else
        {
            s = file.getAbsolutePath();
        }
        
        if ( model.getStageDataTable().getStagePath() != null  && model.getStageDataTable().getStagePath().equals("") == false )
        {
            stageLoaded = true;
        }
        else
        {
            stageLoaded = false;
        }
        

        doc = (AbstractDocument) jStageField.getDocument();
        doc. setDocumentFilter(null);
        jStageField.setText(s);        
        doc. setDocumentFilter(new ReadOnlyDocFilter());
        
        Date start = new Date();
        Date stop = new Date();
        model.getStageDataTable().getTimeRange(start, stop);
                    
        Calendar cal = Calendar.getInstance();
        cal.setTime(start);
        startYear = cal.get(Calendar.YEAR);
                   
        cal.setTime(stop);
        stopYear = cal.get(Calendar.YEAR);
                    
        jStartYearField.setText(Integer.toString(startYear));
        jStopYearField.setText(Integer.toString(stopYear));        
                    
        updateRunButton();        
    }//GEN-LAST:event_formWindowGainedFocus

    private void jSaveDebugItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveDebugItemActionPerformed
        fc.setCurrentDirectory(lastResultFile);
        fc.setSelectedFile(new File(model.getCropInfoTable().getHeader().getName() + 
                            "_report.txt"));
        
        int rval = fc.showSaveDialog(this);
        
        if ( rval == fc.APPROVE_OPTION )
        {
            results.save(fc.getSelectedFile());
        }
    }//GEN-LAST:event_jSaveDebugItemActionPerformed

    private void jSaveReportItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveReportItemActionPerformed
        fc.setCurrentDirectory(lastResultFile);
        fc.setSelectedFile(new File(model.getCropInfoTable().getHeader().getName() + 
                            "_report.txt"));
        
        int rval = fc.showSaveDialog(this);
        
        if ( rval == fc.APPROVE_OPTION )
        {
            try
            {
                summary.model.writeToFile(fc.getSelectedFile());
            }
            catch (IOException e)
            {
                op.showMessageDialog(this,e.getMessage(),"IOError",op.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jSaveReportItemActionPerformed

    private void jSaveSummaryItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveSummaryItemActionPerformed
            try
            {
                querySave();
            }
            catch( IOException e)
            {
                op.showMessageDialog(this,e.getMessage(),"IO Error",op.ERROR_MESSAGE);
            }
    }//GEN-LAST:event_jSaveSummaryItemActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        if ( mShowingResults && !mResultsSave )
        {
            try
            {
                querySave();
            }
            catch( IOException e)
            {
                op.showMessageDialog(this,e.getMessage(),"IO Error",op.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_formWindowClosing

    private void jYearResultsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jYearResultsItemActionPerformed
        if ( results != null)
        {
            results.setVisible(true);
        }
    }//GEN-LAST:event_jYearResultsItemActionPerformed

    private void jSummaryItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSummaryItemActionPerformed
        if ( summary != null )
        {
            summary.setVisible(true);
        }
    }//GEN-LAST:event_jSummaryItemActionPerformed

    private void integerFilter(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_integerFilter
        char ch = evt.getKeyChar();
        
        if ( ch < evt.VK_0 && ch > evt.VK_9)
        {
            evt.consume();
        }
    }//GEN-LAST:event_integerFilter

    /** This function contains the control logic for responding to a press of the run button */
    
    private void jRunButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jRunButtonActionPerformed
        if ( mShowingResults && !mResultsSave )
        {
            try
            {
                querySave();
            }
            catch( IOException e)
            {
                op.showMessageDialog(this,e.getMessage(),"IO Error",op.ERROR_MESSAGE);
            }
        }
        
        //try
        //{
            // release any previous results
            results = null;
            summary = null;
            
            // disable the menu items that no longer have data
            jSummaryItem.setEnabled(false);
            jYearResultsItem .setEnabled(false);
            jSaveMenu.setEnabled(false);
            
            // reclame any unreferenced objects now
            System.gc();
            
            //retrieve the start and end dates for this run from the inmput fields
            startYear = Integer.parseInt(jStartYearField.getText());
            stopYear = Integer.parseInt(jStopYearField.getText());

            // run the model for the inidcated time range
            model.runRange(startYear, stopYear);

            // make a window to display yearly results
            results = new ModelResultsFrame(startYear,model.getBands(),model.getCropInfoTable());

            // depeneding on the mode inidacted in the crop info file thw window may or may not be shown
            if ( model.getCropInfoTable().getHeader().getMode() == ReachInfoHeader.Mode.Debug )
            {
                results.setVisible(true);
            }

            // make a window to show summary resukts
            summary = new ModelSummaryFrame(startYear,model.getBands(),model.getCropInfoTable());

            // depending on the mode indicated in the crop info header the rwindow may or may not be shown
            if ( model.getCropInfoTable().getHeader().getMode() != ReachInfoHeader.Mode.Brief || true) //always show summary
            {
                summary.setVisible(true);
            }

            // enable the menu items that now have data
            jSummaryItem.setEnabled(true);
            jYearResultsItem .setEnabled(true);
            jSaveMenu.setEnabled(true);

            // update the GUI controls
            updateDisplay();
        //}
        /*catch( Exception e)
        {
            op.showMessageDialog(this,e.getMessage(),"Error",op.ERROR_MESSAGE);
            
            for( int i = 0; i < e.getStackTrace().length; ++i)
            {
                System.out.println(e.getStackTrace()[i]);
            }
        }*/
        
    }//GEN-LAST:event_jRunButtonActionPerformed

    /** This function contains the control logic to responding to the selection of the edit stage data menu item*/
    
    private void jEditStageDataItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEditStageDataItemActionPerformed
        stageDataFrame.setVisible(true);
    }//GEN-LAST:event_jEditStageDataItemActionPerformed

    /** This function contains the control logic for responding to the selection of the edit budget menu item */
    
    private void jEditFloodDamageItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEditFloodDamageItemActionPerformed
        floodDamageFrame.setVisible(true);
    }//GEN-LAST:event_jEditFloodDamageItemActionPerformed

    
    private void jEditCropMenuItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jEditCropMenuItemActionPerformed
        cropInfoFrame.setVisible(true);
    }//GEN-LAST:event_jEditCropMenuItemActionPerformed

    private void jStageDataItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jStageDataItemActionPerformed
        // setup the file chooser
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setAcceptAllFileFilterUsed(false);   // do not display all files
        fc.setCurrentDirectory(lastFile);
        fc.setFileFilter(FileFilters.dss);
        
        switch ( fc.showOpenDialog(this) )
        {
            case JFileChooser.CANCEL_OPTION:
               
            break;
            
            case JFileChooser.APPROVE_OPTION:
                try
                {
                    File selection = fc.getSelectedFile();
                    if ( fc.getSelectedFile().getName().endsWith(".dss") )
                    {
                        int rval = loadDSS(fc.getSelectedFile());
                        
                        if ( rval == -1 )
                        {
                            return;
                        }
                        
                    }
                    else
                    {
                        model.getStageDataTable().load(selection);
                    }
                    lastFile = selection;
                    prefs.put("Last File",selection.getAbsolutePath());
                    
                    Date start = new Date();
                    Date stop = new Date();
                    model.getStageDataTable().getTimeRange(start, stop);
                    
                    Calendar cal = Calendar.getInstance();
                    cal.setTime(start);
                    startYear = cal.get(Calendar.YEAR);
                    
                    cal.setTime(stop);
                    stopYear = cal.get(Calendar.YEAR);
                    
                    jStartYearField.setText(Integer.toString(startYear));
                    jStopYearField.setText(Integer.toString(stopYear));
                    
                    stageLoaded = true;
                    AbstractDocument doc = (AbstractDocument) jStageField.getDocument();
                    doc.setDocumentFilter(null);
                    jStageField.setText(model.getStageDataTable().getDSSFile().getAbsolutePath());
                    doc. setDocumentFilter(new ReadOnlyDocFilter());                    
                    updateRunButton();
                }
                catch (IOException e)
                {
                    
                }
            break;
                    
            case JFileChooser.ERROR_OPTION:
                
            return;
                   
        }
    }//GEN-LAST:event_jStageDataItemActionPerformed

    private int loadDSS(File file) throws java.io.IOException
    {
        HecTimeSeries ts;
        
        /// open the time series and paired data structures
        ts = new HecTimeSeries();
        ts.setDSSFileName(file.getAbsolutePath());
        
        //pd = new HecPairedData();
        //pd.setDSSFileName(file.getAbsolutePath());
        
        // get a list of possible path names
        Vector<String> paths = new Vector<String>();
        ts.searchDSSCatalog("","","","","","", paths);
        
        DSSFrame frame = null;
        
        // make a dialog to choose the stage and area paths
        outer: for ( int i = 0; i < paths.size(); ++i )
        {
            // get the selected path and added it to the display list
            String selectedPath = paths.get(i);
            
            // break the selected path into segments
            String[] selectedParts = selectedPath.substring(1).split("/");
            
            String[] legalCParts = model.getDataCPartStrings();
            // make sure the c part is a legal part for stage data
            boolean legal = false;
            for( int j = 0; j < legalCParts.length; ++j)
            {
                if(legalCParts[j].equals(selectedParts[2]))
                {
                    legal = true;
                    break;
                }
            }
            
            // if the cpart isnt legal go to the next path
            if ( legal == false)
            {
                continue;
            }           
            
           String currentPath; 
           String[] currentParts; 
           
           ++i;
           do
           {    
            //advance to the next path and get it
            currentPath = (String) paths.get(i);
            currentParts = currentPath.substring(1).split("/");
           } while ( selectedParts[0].equals(currentParts[0]) &&
                     selectedParts[1].equals(currentParts[1]) &&
                     selectedParts[2].equals(currentParts[2]) &&
                     selectedParts[4].equals(currentParts[4]) &&
                     selectedParts[5].equals(currentParts[5]) &&
                     ++i < paths.size() );
           
           --i;
           currentPath = paths.get(i);
           currentParts = currentPath.substring(1).split("/");
           
           // make the display string that hold D range
           java.util.Vector path = new java.util.Vector();
           path.add(selectedParts[0]);
           path.add(selectedParts[1]);
           path.add(selectedParts[2]);
           path.add(selectedParts[3] + " - " + currentParts[3]);
           path.add(selectedParts[4]);
           path.add(selectedParts[5]); 
           
           if ( frame == null )
           {
               String[] temp = model.getAreaCPartStrings();
               ArrayList<String> areaString = new ArrayList<String>();
               
               for(int k = 0; k < temp.length; ++k)
               {
                    areaString.add(temp[k]);
               }
               
               frame = new DSSFrame(this,true,ts,areaString);
           }
           
           frame.addDSSPath(selectedParts[0],selectedParts[1],selectedParts[2],selectedParts[3],currentParts[3],selectedParts[4],selectedParts[5]);
           
        }
        
        frame.setDataSelection(0);
        frame.setVisible(true);
        
        if ( !frame.userCancel() ) 
        {
            String areaPath = frame.getAreaPath();
            String dataPath = frame.getDataPath();
        
            model.getStageDataTable().loadDSS(file,dataPath,areaPath);
            
            return 0;
        }
        else
        {
            return -1;
        }
            
     
    }
    
    private void jFloodDamageItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFloodDamageItemActionPerformed
        // setup the file chooser
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setAcceptAllFileFilterUsed(false);   // do not display all files
        fc.setCurrentDirectory(lastFile);
        fc.setFileFilter(FileFilters.text);
        
        switch ( fc.showOpenDialog(this) )
        {
            case JFileChooser.CANCEL_OPTION:
               
            break;
            
            case JFileChooser.APPROVE_OPTION:
                try
                {
                    File selection = fc.getSelectedFile();
                    model.getFloodDamageTable().load(selection);
                    lastFile = selection;
                    prefs.put("Last File",selection.getAbsolutePath());
                    
                    floodLoaded = true;
                    AbstractDocument doc = (AbstractDocument) jFloodDamageField.getDocument();
                    doc. setDocumentFilter(null);
                    jFloodDamageField.setText(model.getFloodDamageTable().getFile().getAbsolutePath());
                    doc. setDocumentFilter(new ReadOnlyDocFilter());
                    updateRunButton();
                }
                catch (IOException e)
                {
                    
                }
            break;
                    
            case JFileChooser.ERROR_OPTION:
                
            return;
                   
        }
    }//GEN-LAST:event_jFloodDamageItemActionPerformed

    private void jCropInfoItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCropInfoItemActionPerformed
        // setup the file chooser
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setAcceptAllFileFilterUsed(false);   // do not display all files
        fc.setCurrentDirectory(lastFile);
        fc.setFileFilter(FileFilters.text);
        
        switch ( fc.showOpenDialog(this) )
        {
            case JFileChooser.CANCEL_OPTION:
               
            break;
            
            case JFileChooser.APPROVE_OPTION:
                try
                {
                    File selection = fc.getSelectedFile();
                    model.getCropInfoTable().load(fc.getSelectedFile());
                    lastFile = selection;
                    prefs.put("Last File",selection.getAbsolutePath());
                    
                    cropLoaded = true;
                    AbstractDocument doc = (AbstractDocument) jCropInfoField.getDocument();
                    doc. setDocumentFilter(null);
                    jCropInfoField.setText(model.getCropInfoTable().getFile().getAbsolutePath());        
                    doc. setDocumentFilter(new ReadOnlyDocFilter());
                    
                    updateRunButton();
                }
                catch (IOException e)
                {
                    op.showMessageDialog(this,e.getMessage(), "IOError", op.ERROR_MESSAGE);
                }
                catch (DataCardException e)
                {
                    op.showMessageDialog(this,e.getMessage(), "IOError", op.ERROR_MESSAGE);
                }
            break;
                    
            case JFileChooser.ERROR_OPTION:
                
            return;
                   
        }
   
    }//GEN-LAST:event_jCropInfoItemActionPerformed
    
    private void updateRunButton()
    {
        if ( cropLoaded && floodLoaded && stageLoaded )
        {
            jRunButton.setEnabled(true);
        }
    }
    
    public void init()
    {
        model = new DamageModel();
        
        // initalize the viewing frames with the models data tables
        cropInfoFrame = new CropInfoFrame(model.getCropInfoTable());
        floodDamageFrame = new FloodDamageFrame(model.getFloodDamageTable());
        stageDataFrame = new StageDataFrame(model.getStageDataTable());
        
        prefs = Preferences.userNodeForPackage(this.getClass());
        
        cropLoaded = false;
        floodLoaded = false;
        stageLoaded = false;
        
        String path = prefs.get("Last File","");
        if ( !path.equals("") )
        {
            lastFile = new File(path);
            if ( ! lastFile.exists() )
            {
                lastFile = null;
            }
        }
        
        path = prefs.get("Last Result File","");
        if ( !path.equals("") )
        {
            lastResultFile = new File(path);
            if ( ! lastResultFile.exists() )
            {
                lastResultFile = null;
            }            
        }
        
       getRootPane().setDefaultButton(jRunButton);
       
       String libpath = System.getProperty("java.library.path");
       
       System.err.println(libpath);
        
    }
    
    private void addFileFilters()
    {                
        fc.addChoosableFileFilter(FileFilters.universal);
        fc.addChoosableFileFilter(FileFilters.dss);
        fc.addChoosableFileFilter(FileFilters.text);  
    }    
    
    private void updateDisplay()
    {
        if ( results != null && summary != null )
        {
            // calculate totals
            
            totalBandedAcresFlooded = 0;
            totalPeakAcresFlooded = 0;
            totalDamagedAcres = 0;
            totalDamages = 0;
            int years = stopYear-startYear+1;
            
            for( int i = 0 ; i < summary.model.getRowCount(); ++i )
            {
                totalBandedAcresFlooded += (Double) summary.model.getValueAt(i, 3);
                totalPeakAcresFlooded += (Double) summary.model.getValueAt(i, 2);
                totalDamagedAcres += (Double) summary.model.getValueAt(i, 4);
                totalDamages += ((CurrencyContainer) summary.model.getValueAt(i, 8)).getValue(); 
            }
            
            annualDamages = totalDamages / years;
            annualDamagedAcres = totalDamagedAcres / years;
            damagePerBandedAcre = totalDamages / totalBandedAcresFlooded;
            damagePerPeakAcre = totalDamages / totalPeakAcresFlooded;
            avgDamagePerAnnualAcre = totalDamages / totalDamagedAcres; // same as annualDamage / annualDamagedAcres      
            
            java.text.NumberFormat nf1 = java.text.NumberFormat.getInstance();
            nf1.setMinimumIntegerDigits(1);
            nf1.setMinimumFractionDigits(2);
            nf1.setMinimumFractionDigits(2);
            nf1.setGroupingUsed(true);
            
            java.text.NumberFormat cf1 = java.text.NumberFormat.getCurrencyInstance();
            cf1.setMinimumIntegerDigits(1);
            cf1.setMinimumFractionDigits(2);
            cf1.setMinimumFractionDigits(2);
            cf1.setGroupingUsed(true);
            
            AbstractDocument doc;
            
            // set the total damages field
            doc = (AbstractDocument) jTotalDamageField.getDocument();
            doc.setDocumentFilter(null);
            jTotalDamageField.setText(cf1.format(totalDamages));
            doc.setDocumentFilter(new ReadOnlyDocFilter());
            
            // set the total damages field
            doc = (AbstractDocument) jAnnualDamageField.getDocument();
            doc.setDocumentFilter(null);
            jAnnualDamageField.setText(cf1.format(annualDamages));
            doc.setDocumentFilter(new ReadOnlyDocFilter());
            
            // set the total banded acres field
            doc = (AbstractDocument) jTotalBAField.getDocument();
            doc.setDocumentFilter(null);
            jTotalBAField.setText(nf1.format(totalBandedAcresFlooded));
            doc.setDocumentFilter(new ReadOnlyDocFilter());
            
            // set the total peak acres field
            doc = (AbstractDocument) jTotalPeakAcresField.getDocument();
            doc.setDocumentFilter(null);
            jTotalPeakAcresField.setText(nf1.format(totalPeakAcresFlooded));
            doc.setDocumentFilter(new ReadOnlyDocFilter());   
            
            // set the total damaged acres field
            doc = (AbstractDocument) jNetAADamageField.getDocument();
            doc.setDocumentFilter(null);
            jNetAADamageField.setText(nf1.format(annualDamagedAcres));
            doc.setDocumentFilter(new ReadOnlyDocFilter());   
            
            // set damages / banded acre
            doc = (AbstractDocument) jDamagePerBAField.getDocument();
            doc.setDocumentFilter(null);
            jDamagePerBAField.setText(cf1.format(damagePerBandedAcre));
            doc.setDocumentFilter(new ReadOnlyDocFilter());
            
            // set damages per / peak acre
            doc = (AbstractDocument) jDamagePerPeakAcreField.getDocument();
            doc.setDocumentFilter(null);
            jDamagePerPeakAcreField.setText(cf1.format(damagePerPeakAcre));
            doc.setDocumentFilter(new ReadOnlyDocFilter());            
            
            // set damages per / annual damaged acre
            doc = (AbstractDocument) jAvgAnnualDamageField.getDocument();
            doc.setDocumentFilter(null);
            jAvgAnnualDamageField.setText(cf1.format(avgDamagePerAnnualAcre));
            doc.setDocumentFilter(new ReadOnlyDocFilter());
            
            mShowingResults = true;
            mResultsSave = false;
        }
    }
    
    private void querySave() throws IOException
    {
        fc.setCurrentDirectory(lastResultFile);
        fc.setSelectedFile(new File(
                model.getCropInfoTable().getHeader().getName() +
                "_summary.txt"));
        
        int rval = fc.showSaveDialog(this);
        
        if ( rval == fc.APPROVE_OPTION )
        {
            writeToFile(fc.getSelectedFile());
        }
        else
        {
            
        }
    }
    
    private void writeToFile(File file) throws IOException
    {
        if ( file.exists() )
        {
            file.delete();
        }
       
        java.text.NumberFormat nf1 = java.text.NumberFormat.getInstance();
        nf1.setMinimumIntegerDigits(1);
        nf1.setMinimumFractionDigits(2);
        nf1.setMinimumFractionDigits(2);
        nf1.setGroupingUsed(true);
            
        java.text.NumberFormat cf1 = java.text.NumberFormat.getCurrencyInstance();
        cf1.setMinimumIntegerDigits(1);
        cf1.setMinimumFractionDigits(2);
        cf1.setMinimumFractionDigits(2);
        cf1.setGroupingUsed(true);
            
            
        FileWriter writer = new FileWriter(file);
        
        writer.write("NUMBER OF YEARS REPORTED\t");
        writer.write(Integer.toString(stopYear-startYear+1));
        writer.write("\n");
        
        writer.write("TOTAL DAMAGES\t");
        writer.write(cf1.format(totalDamages));
        writer.write("\n");
        
        writer.write("ANNUAL DAMAGES\t");
        writer.write(cf1.format(annualDamages));
        writer.write("\n");         
        
        writer.write("NET ANNUAL ACRES DAMAGED\t");
        writer.write(nf1.format(annualDamagedAcres));
        writer.write("\n");         
        
        writer.write("AVERAGE ANNUAL DAMAGES / ACRE DAMAGED\t");
        writer.write(cf1.format(avgDamagePerAnnualAcre));
        writer.write("\n");
        
        writer.write("TOTAL BANDED ACRES FLOODED\t");
        writer.write(nf1.format(totalBandedAcresFlooded));
        writer.write("\n");
        
        writer.write("DAMAGES PER BANDED ACRE FLOODED");
        writer.write(cf1.format(damagePerBandedAcre));
        writer.write("\n");
        
        writer.write("TOTAL PEAK ACRES FLOODED\t");
        writer.write(nf1.format(totalPeakAcresFlooded));
        writer.write("\n");
        
        writer.write("DAMAGES PER PEAK ACRE FLOODED");
        writer.write(cf1.format(damagePerPeakAcre));
        writer.write("\n");
        
        writer.close();
        
        prefs.put("Last Result File",file.getAbsolutePath());
        
        mResultsSave = true;
        
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new DamgeFrame().setVisible(true);
            }
        });
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JMenu JOpenMenu;
    private javax.swing.JFileChooser fc;
    private javax.swing.JTextField jAnnualDamageField;
    private javax.swing.JTextField jAvgAnnualDamageField;
    private javax.swing.JPanel jBottomPanel;
    private javax.swing.JPanel jCropDataPanel;
    private javax.swing.JTextField jCropInfoField;
    private javax.swing.JMenuItem jCropInfoItem;
    private javax.swing.JTextField jDamagePerBAField;
    private javax.swing.JTextField jDamagePerPeakAcreField;
    private javax.swing.JMenuItem jEditCropMenuItem;
    private javax.swing.JMenuItem jEditFloodDamageItem;
    private javax.swing.JMenuItem jEditStageDataItem;
    private javax.swing.JMenu jFileMenu;
    private javax.swing.JTextField jFloodDamageField;
    private javax.swing.JMenuItem jFloodDamageItem;
    private javax.swing.JPanel jFloodDamagePanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jLeftBorder;
    private javax.swing.JPanel jMainPanel;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenu jModleMenu;
    private javax.swing.JTextField jNetAADamageField;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel12;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JPanel jRightBorder;
    private javax.swing.JButton jRunButton;
    private javax.swing.JPanel jRunPanel;
    private javax.swing.JMenuItem jSaveDebugItem;
    private javax.swing.JMenu jSaveMenu;
    private javax.swing.JMenuItem jSaveReportItem;
    private javax.swing.JMenuItem jSaveSummaryItem;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JMenuItem jStageDataItem;
    private javax.swing.JPanel jStageDataPanel;
    private javax.swing.JTextField jStageField;
    private javax.swing.JTextField jStartYearField;
    private javax.swing.JTextField jStopYearField;
    private javax.swing.JMenuItem jSummaryItem;
    private javax.swing.JMenu jTableEditMenu;
    private javax.swing.JPanel jTopBorder;
    private javax.swing.JTextField jTotalBAField;
    private javax.swing.JTextField jTotalDamageField;
    private javax.swing.JTextField jTotalPeakAcresField;
    private javax.swing.JPanel jYearPanel;
    private javax.swing.JMenuItem jYearResultsItem;
    private javax.swing.JOptionPane op;
    // End of variables declaration//GEN-END:variables
    
    FloodDamageFrame floodDamageFrame;
    CropInfoFrame cropInfoFrame;
    StageDataFrame stageDataFrame;
    
    DamageModel model;
    
    boolean floodLoaded = false;
    boolean cropLoaded = false;
    boolean stageLoaded = false;
    
    boolean mShowingResults = false;
    boolean mResultsSave = false;
    
    int startYear;
    int stopYear;
    
    double totalBandedAcresFlooded = 0;
    double totalPeakAcresFlooded = 0;
    double totalDamagedAcres = 0;
    double totalDamages = 0;
    double annualDamages = 0;
    double annualDamagedAcres = 0;
    double damagePerBandedAcre = 0;
    double damagePerPeakAcre = 0;
    double avgDamagePerAnnualAcre = 0;
    
    ModelResultsFrame results;
    ModelSummaryFrame summary;
    
    Preferences prefs;
    File lastFile;
    
    File lastResultFile;
}
