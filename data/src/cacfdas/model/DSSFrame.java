/*
 * DSSFrame.java
 *
 * Created on May 2, 2006, 8:51 AM
 */

package cacfdas.model;

/**
 *
 * @author  b4edhdwj
 */

import java.util.*;

import javax.swing.event.*;
import javax.swing.table.*;

import hec.heclib.dss.*;
import hec.heclib.util.*;

public class DSSFrame extends javax.swing.JDialog {
    
    /** Creates new form DSSFrame */
    public DSSFrame(java.awt.Frame parent, boolean modal, HecTimeSeries dss, ArrayList<String> legalAreaCParts) {
        
        super(parent, modal);
        
        ts = dss;
        areaPartList = legalAreaCParts;
        
        init();
        initComponents();
        init2();
        addListeners();
    }
    
    private void init()
    {
        dataModel = new DSSPathModel();
        areaModel = new DSSPathModel();
        
        mCancel = true;
    }
    
    private void init2()
    {
        getRootPane().setDefaultButton(jOkButton);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jPanel1 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel7 = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTable2 = new javax.swing.JTable();
        jPanel2 = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jCancelButton = new javax.swing.JButton();
        jPanel9 = new javax.swing.JPanel();
        jOkButton = new javax.swing.JButton();
        jPanel8 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();

        setTitle("Select DSS Paths");
        addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosed(java.awt.event.WindowEvent evt) {
                formWindowClosed(evt);
            }
        });

        jPanel1.setLayout(new javax.swing.BoxLayout(jPanel1, javax.swing.BoxLayout.Y_AXIS));

        jTable1.setModel(dataModel);
        jTable1.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jScrollPane1.setViewportView(jTable1);

        jPanel1.add(jScrollPane1);

        jPanel7.setMaximumSize(new java.awt.Dimension(32767, 10));
        jPanel1.add(jPanel7);

        jTable2.setModel(areaModel);
        jTable2.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                formKeyPressed(evt);
            }
        });

        jScrollPane2.setViewportView(jTable2);

        jPanel1.add(jScrollPane2);

        getContentPane().add(jPanel1, java.awt.BorderLayout.CENTER);

        getContentPane().add(jPanel2, java.awt.BorderLayout.NORTH);

        jPanel3.setLayout(new javax.swing.BoxLayout(jPanel3, javax.swing.BoxLayout.X_AXIS));

        jPanel3.setMaximumSize(new java.awt.Dimension(32767, 30));
        jPanel3.setPreferredSize(new java.awt.Dimension(10, 30));
        jPanel3.add(jPanel6);

        jCancelButton.setText("Cancel");
        jCancelButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCancelButtonActionPerformed(evt);
            }
        });

        jPanel3.add(jCancelButton);

        jPanel9.setMaximumSize(new java.awt.Dimension(10, 32767));
        jPanel3.add(jPanel9);

        jOkButton.setText("OK");
        jOkButton.setMaximumSize(new java.awt.Dimension(73, 23));
        jOkButton.setMinimumSize(new java.awt.Dimension(73, 23));
        jOkButton.setPreferredSize(new java.awt.Dimension(73, 23));
        jOkButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOkButtonActionPerformed(evt);
            }
        });

        jPanel3.add(jOkButton);

        jPanel8.setMaximumSize(new java.awt.Dimension(10, 32767));
        jPanel3.add(jPanel8);

        getContentPane().add(jPanel3, java.awt.BorderLayout.SOUTH);

        getContentPane().add(jPanel4, java.awt.BorderLayout.EAST);

        getContentPane().add(jPanel5, java.awt.BorderLayout.WEST);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-471)/2, (screenSize.height-332)/2, 471, 332);
    }//GEN-END:initComponents

    private void formKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_formKeyPressed
        if ( evt.getKeyCode() == evt.VK_ESCAPE )
        {
            jCancelButton.doClick();
        }
    }//GEN-LAST:event_formKeyPressed

    private void jOkButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOkButtonActionPerformed
        mCancel = false;
        setVisible(false);
    }//GEN-LAST:event_jOkButtonActionPerformed

    private void jCancelButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCancelButtonActionPerformed
        setVisible(false);    
    }//GEN-LAST:event_jCancelButtonActionPerformed

    private void formWindowClosed(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosed
   
    }//GEN-LAST:event_formWindowClosed
    
    private void addListeners()
    {
        jTable1.getSelectionModel().addListSelectionListener(new ListSelectionListener()
        {
            public void valueChanged(ListSelectionEvent e)
            {
                if ( e.getValueIsAdjusting() == false )
                {
                    int pos = jTable1.getSelectedRow();
                    
                    if ( pos != -1 )
                    {
                        setDataPathIndex(pos);
                    }
                }
            }
        });
        
         jTable2.getSelectionModel().addListSelectionListener(new ListSelectionListener()
        {
            public void valueChanged(ListSelectionEvent e)
            {
                if ( e.getValueIsAdjusting() == false )
                {
                    int pos = jTable2.getSelectedRow();
                    
                    if ( pos != -1 )
                    {
                        setAreaPathIndex(pos);
                    }
                }
            }
        });       
    }
    
    public void addDSSPath(String aPart, String bPart, String cPart, String initalDPart, String finalDPart, String ePart, String fPart)
    {
        StringBuffer buffer = new StringBuffer();
        
        buffer.append("/");
        buffer.append(aPart);
        buffer.append("/");
        buffer.append(bPart);
        buffer.append("/");
        buffer.append(cPart);
        buffer.append("/");
        buffer.append(initalDPart);
        buffer.append(" - ");
        buffer.append(finalDPart);
        buffer.append("/");
        buffer.append(ePart);
        buffer.append("/");
        buffer.append(fPart);
        buffer.append("/");
        
        dataModel.addPath(buffer.toString());
    }
    
    public String getDataPath()
    {
        int pos = jTable1.getSelectedRow();
        
        if ( pos >= 0 )
        {
            String[] parts = dataModel.getPath(pos).substring(1).split("/");
            
            String[] dParts = parts[3].split(" - ");
            
            StringBuffer buffer = new StringBuffer();
            
            buffer.append("/");
            buffer.append(parts[0]);
            buffer.append("/");
            buffer.append(parts[1]);
            buffer.append("/");
            buffer.append(parts[2]);
            buffer.append("/");
            buffer.append(dParts[0]);
            buffer.append("/");
            buffer.append(parts[4]);
            buffer.append("/");
            buffer.append(parts[5]);
            buffer.append("/");
            
            return buffer.toString();
        }
        else
        {
            return "";
        }
    }
    
    public String getAreaPath()
    {
         int pos = jTable2.getSelectedRow();
        
        if ( pos >= 0 )
        {
            return areaModel.getPath(pos);
        }
        else
        {
            return "";
        }       
    }
    
    public void setDataSelection(int pos)
    {
        jTable1.getSelectionModel().setSelectionInterval(pos,pos);
    }
    
    private void setAreaPathIndex(int i)
    {
    }    
    
    private void setDataPathIndex(int pos)
    {
        String[] parts = dataModel.getParts(pos);

        areaModel.clear();
        for( int i = 0; i < areaPartList.size(); ++i )   
        {
            Vector<String> paths = new Vector<String>();
            ts.searchDSSCatalog(parts[0],parts[1], areaPartList.get(i), "", "", "", paths);
            
            for( int j = 0; j < paths.size(); ++j )
            {
                areaModel.addPath(paths.get(j));
            }
        }
  
        jTable2.getSelectionModel().setSelectionInterval(0,0);
    }
    
    public class DSSPathModel extends AbstractTableModel
    {
        public DSSPathModel()
        {
            paths = new ArrayList<String>();
            pathParts = new ArrayList<String[]>();            
        }
        
        public void addPath(String path)
        {
   
            String[] inputParts = path.substring(1).split("/");
            String[] parts = new String[6];
            
            int i = 0;
            
            while(i < inputParts.length)
            {
                parts[i] = inputParts[i];
                ++i;
            }
            
            while (i < parts.length)
            {
                parts[i] = "";
                ++i;
            }
            
            paths.add(path);
            pathParts.add(parts);
            
            fireTableRowsUpdated(paths.size(), paths.size());
            
        }
        
        public void clear()
        {
            paths.clear();
            pathParts.clear();
        }
        
        public Class<?> getColumnClass(int column)
        {
            return String.class;
        }
        
        public int getColumnCount()
        {
            return 6;
        }
        
        public String getColumnName(int column)
        {
            switch(column)
            {
                case 0:
                    return "A Part";
                    
                case 1:
                    return "B Part";
                    
                case 2:
                    return "C Part";
                    
                case 3:
                    return "D Part";
                    
                case 4:
                    return "E Part";
                    
                case 5:
                    return "F Part";
                    
                default:
                    return "";
            }
        }
        
        String getPath(int i)
        {
            if ( i < paths.size() && i >= 0 )
            {
                return paths.get(i);
            }
            else
            {
                return "";
            }
        }
        
        String[] getParts(int i)
        {
            if ( i < paths.size() && i >= 0 )
            {
                return pathParts.get(i);
            }
            else
            {
                return new String[1];
            }
        }        
        
        public int getRowCount()
        {
            return paths.size();
        }
               
        public Object getValueAt(int row, int column)
        {
            if ( row < pathParts.size() )
            {
                if ( column < 6 && column >= 0 )
                {
                    return pathParts.get(row)[column];
                }
                else
                {
                    return "";
                }
            }
            else
            {
                return "";
            }
        }
        
        private ArrayList<String> paths;
        private ArrayList<String[]> pathParts;
    }
    
    public boolean userCancel()
    {
        return mCancel;
    }
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jCancelButton;
    private javax.swing.JButton jOkButton;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable jTable1;
    private javax.swing.JTable jTable2;
    // End of variables declaration//GEN-END:variables
 
    DSSPathModel dataModel;
    DSSPathModel areaModel;
    
    HecTimeSeries ts;
    
    String mDataPath;
    String mAreaPath;
    
    ArrayList<String> areaPartList;
    
    boolean mCancel;
}
