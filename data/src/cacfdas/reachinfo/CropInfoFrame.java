/*
 * ReachInfoFrame.java
 *
 * Created on March 21, 2006, 3:54 PM
 */

package cacfdas.reachinfo;

/**
 *
 * @author  b4edhdwj
 */

import java.io.*;
import java.util.*;
import java.util.prefs.*;
import javax.swing.*;
import javax.swing.table.*;

import java.awt.*;
import java.awt.datatransfer.*;
import java.awt.event.*;

import java.text.*;




import cacfdas.exception.*;

public class CropInfoFrame extends javax.swing.JFrame {
    
    /** Creates new form ReachInfoFrame */
    public CropInfoFrame() 
    {
        model = new CropInfoTableModel();
        
        init();
        initComponents();
        addFileFilters();
    }
    
    public CropInfoFrame(CropInfoTable t)
    {
        model = new CropInfoTableModel(t);
        
        init();
        initComponents();
        addFileFilters();
        addListeners();
    }
    
    
    void init()
    {
        String tmp;
        
        // get the last open file
        tmp = prefs.get("Last Open File", "");
        if ( tmp.equals("") == false )
        {
            lastOpenFile = new File(tmp);
        }
    }
    
    private void addFileFilters()
    {         
        fc.addChoosableFileFilter(new javax.swing.filechooser.FileFilter(){ 
                public boolean accept(java.io.File f)
                {
                    String ext = getExtension(f);
                    
                    if ( f.isDirectory() )
                        return true;
                    else if ( ext == null)
                    {
                        return false;
                    }
                    else if ( ext.equals("txt") || ext.equals("text"))
                        return true;
                    else
                        return false;
                }
                
                public String getDescription()
                {
                    return new String("*.txt, *.text");
                }
                
                private String getExtension(java.io.File f) 
                {
                    String ext = null;
                    String s = f.getName();
                    int i = s.lastIndexOf('.');

                    if (i > 0 &&  i < s.length() - 1) {
                        ext = s.substring(i+1).toLowerCase();
                    }
                    return ext;
               }                
        }); 
        
        fc.addChoosableFileFilter(new javax.swing.filechooser.FileFilter(){ 
                public boolean accept(java.io.File f)
                {
                    String ext = getExtension(f);
                    
                    if ( f.isDirectory() )
                        return true;
                    else if ( ext == null)
                    {
                        return false;
                    }
                    else if ( ext.equals("xml") )
                        return true;
                    else
                        return false;
                }
                
                public String getDescription()
                {
                    return new String("*.xml");
                }
                
                private String getExtension(java.io.File f) 
                {
                    String ext = null;
                    String s = f.getName();
                    int i = s.lastIndexOf('.');

                    if (i > 0 &&  i < s.length() - 1) {
                        ext = s.substring(i+1).toLowerCase();
                    }
                    return ext;
               }                
        });        
    }
    
    private void addListeners()
    {
        PasteAdaptor pa = new PasteAdaptor(jTable1);
        CopyAdaptor ca = new CopyAdaptor(jTable1);
        
        jEditMenu.add(ca);
        jEditMenu.add(pa);
    }
    
    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    private void initComponents() {//GEN-BEGIN:initComponents
        jLabel2 = new javax.swing.JLabel();
        op = new javax.swing.JOptionPane();
        fc = new javax.swing.JFileChooser();
        jTabbedPane1 = new javax.swing.JTabbedPane();
        jHeaderPanel = new javax.swing.JPanel();
        jPanel3 = new javax.swing.JPanel();
        jPanel4 = new javax.swing.JPanel();
        jPanel14 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jPanel15 = new javax.swing.JPanel();
        jReachNameField = new javax.swing.JTextField();
        jPanel16 = new javax.swing.JPanel();
        jPanel6 = new javax.swing.JPanel();
        jPanel9 = new javax.swing.JPanel();
        jHeaderFlagsPanel = new javax.swing.JPanel();
        jDebugCheckBox = new javax.swing.JCheckBox();
        jFreeFormatCheckBox = new javax.swing.JCheckBox();
        jOverBookingCheckBox = new javax.swing.JCheckBox();
        jHeaderInputPanel = new javax.swing.JPanel();
        jPanel7 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jPanel8 = new javax.swing.JPanel();
        jPanel10 = new javax.swing.JPanel();
        jNumYearsField = new javax.swing.JTextField();
        jPanel11 = new javax.swing.JPanel();
        jDryOutField = new javax.swing.JTextField();
        JPanel12 = new javax.swing.JPanel();
        jPercentField = new javax.swing.JTextField();
        jPanel13 = new javax.swing.JPanel();
        jPanel5 = new javax.swing.JPanel();
        jTablePanel = new javax.swing.JPanel();
        jPanel1 = new javax.swing.JPanel();
        jPanel17 = new javax.swing.JPanel();
        jPanel18 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTable1 = new javax.swing.JTable();
        jPanel19 = new javax.swing.JPanel();
        jPanel2 = new javax.swing.JPanel();
        jMenuBar1 = new javax.swing.JMenuBar();
        jFileMenu = new javax.swing.JMenu();
        jNewItem = new javax.swing.JMenuItem();
        jSeparator1 = new javax.swing.JSeparator();
        jOpenItem = new javax.swing.JMenuItem();
        jSeparator2 = new javax.swing.JSeparator();
        jSaveItem = new javax.swing.JMenuItem();
        jSaveAsItem = new javax.swing.JMenuItem();
        jSeparator3 = new javax.swing.JSeparator();
        jCloseItem = new javax.swing.JMenuItem();
        jEditMenu = new javax.swing.JMenu();

        jLabel2.setText("jLabel2");

        getContentPane().setLayout(new javax.swing.BoxLayout(getContentPane(), javax.swing.BoxLayout.X_AXIS));

        addWindowFocusListener(new java.awt.event.WindowFocusListener() {
            public void windowGainedFocus(java.awt.event.WindowEvent evt) {
                formWindowGainedFocus(evt);
            }
            public void windowLostFocus(java.awt.event.WindowEvent evt) {
            }
        });

        jHeaderPanel.setLayout(new javax.swing.BoxLayout(jHeaderPanel, javax.swing.BoxLayout.Y_AXIS));

        jPanel3.setMaximumSize(new java.awt.Dimension(32767, 10));
        jHeaderPanel.add(jPanel3);

        jPanel4.setLayout(new javax.swing.BoxLayout(jPanel4, javax.swing.BoxLayout.X_AXIS));

        jPanel4.setMaximumSize(new java.awt.Dimension(32767, 25));
        jPanel4.setMinimumSize(new java.awt.Dimension(10, 25));
        jPanel4.setPreferredSize(new java.awt.Dimension(10, 25));
        jPanel14.setMaximumSize(new java.awt.Dimension(10, 32767));
        jPanel4.add(jPanel14);

        jLabel1.setText("Reach Name");
        jPanel4.add(jLabel1);

        jPanel15.setMaximumSize(new java.awt.Dimension(10, 32767));
        jPanel4.add(jPanel15);

        jReachNameField.setMaximumSize(new java.awt.Dimension(2147483647, 19));
        jReachNameField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jReachNameFieldActionPerformed(evt);
            }
        });
        jReachNameField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jReachNameFieldFocusLost(evt);
            }
        });

        jPanel4.add(jReachNameField);

        jPanel16.setMaximumSize(new java.awt.Dimension(10, 32767));
        jPanel4.add(jPanel16);

        jHeaderPanel.add(jPanel4);

        jPanel6.setLayout(new javax.swing.BoxLayout(jPanel6, javax.swing.BoxLayout.X_AXIS));

        jPanel6.setMaximumSize(new java.awt.Dimension(32953, 75));
        jPanel9.setMaximumSize(new java.awt.Dimension(10, 32767));
        jPanel6.add(jPanel9);

        jHeaderFlagsPanel.setLayout(new javax.swing.BoxLayout(jHeaderFlagsPanel, javax.swing.BoxLayout.Y_AXIS));

        jHeaderFlagsPanel.setMaximumSize(new java.awt.Dimension(16383, 32767));
        jDebugCheckBox.setText("Debug");
        jDebugCheckBox.setMaximumSize(new java.awt.Dimension(120, 25));
        jDebugCheckBox.setMinimumSize(new java.awt.Dimension(120, 25));
        jDebugCheckBox.setPreferredSize(new java.awt.Dimension(120, 25));
        jDebugCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDebugCheckBoxActionPerformed(evt);
            }
        });

        jHeaderFlagsPanel.add(jDebugCheckBox);

        jFreeFormatCheckBox.setText("Free Format");
        jFreeFormatCheckBox.setMaximumSize(new java.awt.Dimension(120, 25));
        jFreeFormatCheckBox.setMinimumSize(new java.awt.Dimension(120, 25));
        jFreeFormatCheckBox.setPreferredSize(new java.awt.Dimension(120, 25));
        jFreeFormatCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFreeFormatCheckBoxActionPerformed(evt);
            }
        });

        jHeaderFlagsPanel.add(jFreeFormatCheckBox);

        jOverBookingCheckBox.setText("Overbooking");
        jOverBookingCheckBox.setMaximumSize(new java.awt.Dimension(120, 25));
        jOverBookingCheckBox.setMinimumSize(new java.awt.Dimension(120, 25));
        jOverBookingCheckBox.setPreferredSize(new java.awt.Dimension(120, 25));
        jOverBookingCheckBox.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOverBookingCheckBoxActionPerformed(evt);
            }
        });

        jHeaderFlagsPanel.add(jOverBookingCheckBox);

        jPanel6.add(jHeaderFlagsPanel);

        jHeaderInputPanel.setLayout(new javax.swing.BoxLayout(jHeaderInputPanel, javax.swing.BoxLayout.X_AXIS));

        jHeaderInputPanel.setMaximumSize(new java.awt.Dimension(32768, 32768));
        jPanel7.setLayout(new javax.swing.BoxLayout(jPanel7, javax.swing.BoxLayout.Y_AXIS));

        jLabel3.setText("Num Years");
        jLabel3.setMaximumSize(new java.awt.Dimension(120, 25));
        jLabel3.setMinimumSize(new java.awt.Dimension(120, 25));
        jLabel3.setPreferredSize(new java.awt.Dimension(120, 25));
        jPanel7.add(jLabel3);

        jLabel4.setText("Dryout Period");
        jLabel4.setMaximumSize(new java.awt.Dimension(120, 25));
        jLabel4.setMinimumSize(new java.awt.Dimension(120, 25));
        jLabel4.setPreferredSize(new java.awt.Dimension(120, 25));
        jPanel7.add(jLabel4);

        jLabel5.setText("Damage Percent");
        jLabel5.setMaximumSize(new java.awt.Dimension(120, 25));
        jLabel5.setMinimumSize(new java.awt.Dimension(120, 25));
        jLabel5.setPreferredSize(new java.awt.Dimension(120, 25));
        jPanel7.add(jLabel5);

        jHeaderInputPanel.add(jPanel7);

        jPanel8.setLayout(new javax.swing.BoxLayout(jPanel8, javax.swing.BoxLayout.Y_AXIS));

        jPanel8.setMinimumSize(new java.awt.Dimension(100, 10));
        jPanel8.setPreferredSize(new java.awt.Dimension(100, 10));
        jPanel10.setLayout(new javax.swing.BoxLayout(jPanel10, javax.swing.BoxLayout.X_AXIS));

        jPanel10.setMaximumSize(new java.awt.Dimension(32767, 25));
        jPanel10.setMinimumSize(new java.awt.Dimension(21, 25));
        jPanel10.setPreferredSize(new java.awt.Dimension(21, 25));
        jNumYearsField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jNumYearsField.setMaximumSize(new java.awt.Dimension(2147483647, 19));
        jNumYearsField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNumYearsFieldActionPerformed(evt);
            }
        });
        jNumYearsField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jNumYearsFieldFocusLost(evt);
            }
        });
        jNumYearsField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                integerFilter(evt);
            }
        });

        jPanel10.add(jNumYearsField);

        jPanel8.add(jPanel10);

        jPanel11.setLayout(new javax.swing.BoxLayout(jPanel11, javax.swing.BoxLayout.X_AXIS));

        jPanel11.setMaximumSize(new java.awt.Dimension(32767, 25));
        jPanel11.setMinimumSize(new java.awt.Dimension(21, 25));
        jPanel11.setOpaque(false);
        jPanel11.setPreferredSize(new java.awt.Dimension(21, 25));
        jDryOutField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jDryOutField.setMaximumSize(new java.awt.Dimension(2147483647, 19));
        jDryOutField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jDryOutFieldActionPerformed(evt);
            }
        });
        jDryOutField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jDryOutFieldFocusLost(evt);
            }
        });
        jDryOutField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                integerFilter(evt);
            }
        });

        jPanel11.add(jDryOutField);

        jPanel8.add(jPanel11);

        JPanel12.setLayout(new javax.swing.BoxLayout(JPanel12, javax.swing.BoxLayout.X_AXIS));

        JPanel12.setMaximumSize(new java.awt.Dimension(32767, 25));
        JPanel12.setMinimumSize(new java.awt.Dimension(21, 25));
        JPanel12.setPreferredSize(new java.awt.Dimension(21, 25));
        jPercentField.setHorizontalAlignment(javax.swing.JTextField.RIGHT);
        jPercentField.setMaximumSize(new java.awt.Dimension(2147483647, 19));
        jPercentField.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jPercentFieldActionPerformed(evt);
            }
        });
        jPercentField.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                jPercentFieldFocusLost(evt);
            }
        });
        jPercentField.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyTyped(java.awt.event.KeyEvent evt) {
                doubleFilter(evt);
            }
        });

        JPanel12.add(jPercentField);

        jPanel8.add(JPanel12);

        jHeaderInputPanel.add(jPanel8);

        jPanel6.add(jHeaderInputPanel);

        jPanel13.setMaximumSize(new java.awt.Dimension(10, 32767));
        jPanel6.add(jPanel13);

        jHeaderPanel.add(jPanel6);

        jPanel5.setMaximumSize(new java.awt.Dimension(32767, 10));
        jHeaderPanel.add(jPanel5);

        jTabbedPane1.addTab("Header", jHeaderPanel);

        jTablePanel.setLayout(new javax.swing.BoxLayout(jTablePanel, javax.swing.BoxLayout.Y_AXIS));

        jPanel1.setMaximumSize(new java.awt.Dimension(32767, 10));
        jTablePanel.add(jPanel1);

        jPanel17.setLayout(new javax.swing.BoxLayout(jPanel17, javax.swing.BoxLayout.X_AXIS));

        jPanel18.setMaximumSize(new java.awt.Dimension(10, 32767));
        jPanel17.add(jPanel18);

        jTable1.setModel(model);
        jScrollPane1.setViewportView(jTable1);

        jPanel17.add(jScrollPane1);

        jPanel19.setMaximumSize(new java.awt.Dimension(10, 32767));
        jPanel17.add(jPanel19);

        jTablePanel.add(jPanel17);

        jPanel2.setMaximumSize(new java.awt.Dimension(32767, 10));
        jTablePanel.add(jPanel2);

        jTabbedPane1.addTab("Data", jTablePanel);

        getContentPane().add(jTabbedPane1);

        jFileMenu.setMnemonic('f');
        jFileMenu.setText("File");
        jNewItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_N, java.awt.event.InputEvent.CTRL_MASK));
        jNewItem.setMnemonic('n');
        jNewItem.setText("New Table");
        jNewItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jNewItemActionPerformed(evt);
            }
        });

        jFileMenu.add(jNewItem);

        jFileMenu.add(jSeparator1);

        jOpenItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_O, java.awt.event.InputEvent.CTRL_MASK));
        jOpenItem.setMnemonic('o');
        jOpenItem.setText("Open");
        jOpenItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jOpenItemActionPerformed(evt);
            }
        });

        jFileMenu.add(jOpenItem);

        jFileMenu.add(jSeparator2);

        jSaveItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.CTRL_MASK));
        jSaveItem.setMnemonic('s');
        jSaveItem.setText("Save");
        jSaveItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSaveItemActionPerformed(evt);
            }
        });

        jFileMenu.add(jSaveItem);

        jSaveAsItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_S, java.awt.event.InputEvent.SHIFT_MASK | java.awt.event.InputEvent.CTRL_MASK));
        jSaveAsItem.setMnemonic('A');
        jSaveAsItem.setText("Save As");
        jSaveAsItem.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jSaveAsItemActionPerformed(evt);
            }
        });

        jFileMenu.add(jSaveAsItem);

        jFileMenu.add(jSeparator3);

        jCloseItem.setAccelerator(javax.swing.KeyStroke.getKeyStroke(java.awt.event.KeyEvent.VK_W, java.awt.event.InputEvent.CTRL_MASK));
        jCloseItem.setMnemonic('c');
        jCloseItem.setText("Close");
        jFileMenu.add(jCloseItem);

        jMenuBar1.add(jFileMenu);

        jEditMenu.setMnemonic('E');
        jEditMenu.setText("Edit");
        jMenuBar1.add(jEditMenu);

        setJMenuBar(jMenuBar1);

        java.awt.Dimension screenSize = java.awt.Toolkit.getDefaultToolkit().getScreenSize();
        setBounds((screenSize.width-600)/2, (screenSize.height-500)/2, 600, 500);
    }//GEN-END:initComponents

    private void jNewItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNewItemActionPerformed
        model.clear();
        initFromModel();
    }//GEN-LAST:event_jNewItemActionPerformed

    private void jSaveAsItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveAsItemActionPerformed
        // setup the file chooser
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setAcceptAllFileFilterUsed(false);   // do not display all files
        fc.setCurrentDirectory(lastOpenFile);
        fc.setSelectedFile(model.getTable().getFile());
            
        int rval = fc.showSaveDialog(this);
        
        if (rval == fc.CANCEL_OPTION || rval == fc.ERROR_OPTION)
        {
            return;
        }
        else
        {
            File selection = fc.getSelectedFile();
            
            try
            {
                model.getTable().writeToFile(selection);
            }
            catch ( IOException e)
            {
                op.showMessageDialog(this,"Could not write to file","IO Error",op.ERROR_MESSAGE);
            }
        }
    }//GEN-LAST:event_jSaveAsItemActionPerformed

    private void jSaveItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jSaveItemActionPerformed
        try
        {
            File selection = model.getTable().getFile();
            if ( selection != null )
            {
                model.getTable().writeToFile(selection);
            }
        }
        catch ( IOException e)
        {
            op.showMessageDialog(this,"Could not write to file","IO Error",op.ERROR_MESSAGE);
        }        
    }//GEN-LAST:event_jSaveItemActionPerformed

    private void formWindowGainedFocus(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowGainedFocus
        initFromModel();
    }//GEN-LAST:event_formWindowGainedFocus

    private void jReachNameFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jReachNameFieldFocusLost
        jReachNameCommit();
    }//GEN-LAST:event_jReachNameFieldFocusLost

    private void jReachNameFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jReachNameFieldActionPerformed
        jReachNameCommit();
    }//GEN-LAST:event_jReachNameFieldActionPerformed

    private void jPercentFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jPercentFieldActionPerformed
        jPercentFieldCommit();
    }//GEN-LAST:event_jPercentFieldActionPerformed

    private void doubleFilter(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_doubleFilter
       if ( evt.getKeyChar() >= evt.VK_0 || evt.getKeyChar() <= evt.VK_9 )
       {
           return;
       }
       else if (evt.getKeyChar() == evt.VK_PERIOD)
       {
           if ( evt.getSource().getClass() == JTextField.class )
           {
               JTextField field = (JTextField) evt.getSource();
               if( field.getText().indexOf('.') == -1 )
               {
                   return;
               }
               else
               {
                   evt.consume();
               }
           }
           else
           {
               evt.consume();
           }
       }
       else
       {
           evt.consume();
       }
    }//GEN-LAST:event_doubleFilter

    private void jPercentFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPercentFieldFocusLost
        jPercentFieldCommit();
    }//GEN-LAST:event_jPercentFieldFocusLost

    private void jDryOutFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jDryOutFieldFocusLost
        jDryOutFieldCommit();
    }//GEN-LAST:event_jDryOutFieldFocusLost

    private void jDryOutFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDryOutFieldActionPerformed
        jDryOutFieldCommit();
    }//GEN-LAST:event_jDryOutFieldActionPerformed

    private void jNumYearsFieldFocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jNumYearsFieldFocusLost
        jNumYearsFieldCommit();
    }//GEN-LAST:event_jNumYearsFieldFocusLost

    private void jNumYearsFieldActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jNumYearsFieldActionPerformed
        jNumYearsFieldCommit();
    }//GEN-LAST:event_jNumYearsFieldActionPerformed

    private void jDryOutFieldCommit()
    {
        try
        {
            int num = Integer.parseInt(jNumYearsField.getText());
            
            model.getTable().getHeader().setBryOutPeriod(num);
        }
        catch ( NumberFormatException e)
        {
            
        }        
    }
    
    private void jNumYearsFieldCommit()
    {
        try
        {
            int num = Integer.parseInt(jNumYearsField.getText());
            
            model.getTable().getHeader().setNumYears(num);
        }
        catch ( NumberFormatException e)
        {
            
        }
    }
    
    private void jPercentFieldCommit()
    {
        try
        {
            double num = Double.parseDouble(jPercentField.getText());
            
            model.getTable().getHeader().setPartialPercentage(num);
        }
        catch ( NumberFormatException e)
        {
            
        }         
    }
    
    private void jReachNameCommit()
    {
        model.getTable().getHeader().setName(jReachNameField.getText());
    }
    
    private void integerFilter(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_integerFilter
       if ( evt.getKeyChar() >= evt.VK_0 || evt.getKeyChar() <= evt.VK_9 )
       {
           return;
       }
       else
       {
           evt.consume();
       }
    }//GEN-LAST:event_integerFilter

    private void jOverBookingCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOverBookingCheckBoxActionPerformed
        model.getTable().getHeader().setOverBooking(jOverBookingCheckBox.isSelected());
    }//GEN-LAST:event_jOverBookingCheckBoxActionPerformed

    private void jFreeFormatCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFreeFormatCheckBoxActionPerformed
        model.getTable().getHeader().setFreeFormat(jFreeFormatCheckBox.isSelected());
    }//GEN-LAST:event_jFreeFormatCheckBoxActionPerformed

    private void jDebugCheckBoxActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jDebugCheckBoxActionPerformed
        if (jDebugCheckBox.isSelected())
        {
            model.getTable().getHeader().setMode(ReachInfoHeader.Mode.Debug);
        }
        else
        {
            model.getTable().getHeader().setMode(ReachInfoHeader.Mode.Report);
        }
    }//GEN-LAST:event_jDebugCheckBoxActionPerformed

    private void jOpenItemActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jOpenItemActionPerformed
        // setup the file chooser
        fc.setFileSelectionMode(JFileChooser.FILES_ONLY);
        fc.setAcceptAllFileFilterUsed(false);   // do not display all files
        fc.setCurrentDirectory(lastOpenFile);     
            
        int rval = fc.showOpenDialog(this);
        
        if (rval == fc.CANCEL_OPTION || rval == fc.ERROR_OPTION)
        {
            return;
        }
        else
        {
            File selection = fc.getSelectedFile();
            
            try
            {
                model.load(selection);
                initFromModel();
                
            }
            catch(FileNotFoundException e)
            {
                op.showMessageDialog(this,e.getMessage(),"File no found",op.ERROR_MESSAGE);
            }
            catch(IOException e)
            {
                op.showMessageDialog(this,e.getMessage(),"IOError",op.ERROR_MESSAGE);
            }
            catch(DataCardException e)
            {
                op.showMessageDialog(this,e.getMessage(),"Date Format Error",op.ERROR_MESSAGE);
            }
            
            lastOpenFile = selection;
            prefs.put("Last Open File", selection.getPath());
        }
    }//GEN-LAST:event_jOpenItemActionPerformed
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        java.awt.EventQueue.invokeLater(new Runnable() {
             public void run() {
                new CropInfoFrame().setVisible(true);
            }
        });
    }
    
    private void initFromModel()
    {
        ReachInfoHeader header = model.getTable().getHeader();
        
        if ( header == null )
        {
            setTitle("CropInfo");
            
            jDebugCheckBox.setSelected(false);
            jFreeFormatCheckBox.setSelected(false);
            jOverBookingCheckBox.setSelected(false);

            jNumYearsField.setText("0");
            jDryOutField.setText("0");
            jPercentField.setText("0");

            jReachNameField.setText("");             
        }
        else
        {
            setTitle("CropInfo - " + header.getName());
            switch( header.getMode() )
            {
                case Debug:
                    jDebugCheckBox.setSelected(true);
                default:
                    jDebugCheckBox.setSelected(false);
            }

            jFreeFormatCheckBox.setSelected(header.getFreeFormat());
            jOverBookingCheckBox.setSelected(header.getOverBooking());

            jNumYearsField.setText(Integer.toString(header.getNumYears()));
            jDryOutField.setText(Integer.toString(header.getDryOutPeriod()));
            jPercentField.setText(Double.toString(header.getPartialPercentage()));

            jReachNameField.setText(header.getName());            
        }
        

        
        File src = model.getTable().getFile();
        if (  src == null || src.canWrite() == false )
        {
            jSaveItem.setEnabled(false);
        }
        else
        {
            jSaveItem.setEnabled(true);
        }
        
    }
    
    private class PasteAdaptor extends AbstractAction
    {
        PasteAdaptor(JComponent c)
        {
            putValue(Action.NAME,"Paste");
            putValue(Action.MNEMONIC_KEY,KeyEvent.VK_A);
            
            KeyStroke paste = KeyStroke.getKeyStroke(KeyEvent.VK_V,ActionEvent.CTRL_MASK,false);
            putValue(Action.ACCELERATOR_KEY,paste);
                
            component = c;
            component.getInputMap().put(paste, "Paste");
            component.getActionMap().put("Paste",this);
            
            system = Toolkit.getDefaultToolkit().getSystemClipboard();
        }
        
        public void actionPerformed(ActionEvent e)
        {
            String clipString;
            String[] lineString;
            
            try
            {
                clipString = (String) system.getData(DataFlavor.stringFlavor);
                
                lineString = clipString.split("\n");
                
                for( int i = 0; i < lineString.length; ++i )
                {
                    model.getTable().addTabbedCropString(lineString[i]); 
                }
                
                model.fireTableDataChanged();
            }
            catch( UnsupportedFlavorException e1 )
            {
                // this exception means the clipboard did not have text no further action is nessessary
            }
            catch (Exception e2)
            {
                e2.printStackTrace();
            }
                    
        }
        
        JComponent component;
        Clipboard system;
    };
    
    private class CopyAdaptor extends AbstractAction
    {
        CopyAdaptor(JComponent c)
        {
            putValue(Action.NAME,"Copy");
            putValue(Action.MNEMONIC_KEY,KeyEvent.VK_C);
            
            KeyStroke paste = KeyStroke.getKeyStroke(KeyEvent.VK_C,ActionEvent.CTRL_MASK,false);
            putValue(Action.ACCELERATOR_KEY,paste);
                
            component = c;
            component.getInputMap().put(paste, "Copy");
            component.getActionMap().put("Copy",this);
            
            system = Toolkit.getDefaultToolkit().getSystemClipboard();
        }
        
        public void actionPerformed(ActionEvent e)
        {
            StringBuffer buffer = new StringBuffer();
            TableModel model = jTable1.getModel();
            Object object;
            String temp;
            
            for(int i = 0; i < model.getRowCount(); ++i )
            {        
                if ( jTable1.isRowSelected(i) && model.getColumnCount() > 0 )
                {
                    object = model.getValueAt(i, 0);
                    temp = (object == null) ? "" : object.toString();
                    buffer.append(temp);
                    for( int j = 1; j < model.getColumnCount(); ++j )
                    {
                        buffer.append("\t"); 
                        object = model.getValueAt(i, j);
                        temp = (object == null) ? "" : object.toString();
                        buffer.append(temp);
                    }
                    buffer.append("\n");    
                }
            }
            
            StringSelection selection = new StringSelection(buffer.toString());
            system.setContents(selection,selection);
                    
        }
        
        JComponent component;
        Clipboard system;
    };    
    
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JPanel JPanel12;
    private javax.swing.JFileChooser fc;
    private javax.swing.JMenuItem jCloseItem;
    private javax.swing.JCheckBox jDebugCheckBox;
    private javax.swing.JTextField jDryOutField;
    private javax.swing.JMenu jEditMenu;
    private javax.swing.JMenu jFileMenu;
    private javax.swing.JCheckBox jFreeFormatCheckBox;
    private javax.swing.JPanel jHeaderFlagsPanel;
    private javax.swing.JPanel jHeaderInputPanel;
    private javax.swing.JPanel jHeaderPanel;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JMenuBar jMenuBar1;
    private javax.swing.JMenuItem jNewItem;
    private javax.swing.JTextField jNumYearsField;
    private javax.swing.JMenuItem jOpenItem;
    private javax.swing.JCheckBox jOverBookingCheckBox;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel10;
    private javax.swing.JPanel jPanel11;
    private javax.swing.JPanel jPanel13;
    private javax.swing.JPanel jPanel14;
    private javax.swing.JPanel jPanel15;
    private javax.swing.JPanel jPanel16;
    private javax.swing.JPanel jPanel17;
    private javax.swing.JPanel jPanel18;
    private javax.swing.JPanel jPanel19;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanel5;
    private javax.swing.JPanel jPanel6;
    private javax.swing.JPanel jPanel7;
    private javax.swing.JPanel jPanel8;
    private javax.swing.JPanel jPanel9;
    private javax.swing.JTextField jPercentField;
    private javax.swing.JTextField jReachNameField;
    private javax.swing.JMenuItem jSaveAsItem;
    private javax.swing.JMenuItem jSaveItem;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JSeparator jSeparator1;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JSeparator jSeparator3;
    private javax.swing.JTabbedPane jTabbedPane1;
    private javax.swing.JTable jTable1;
    private javax.swing.JPanel jTablePanel;
    private javax.swing.JOptionPane op;
    // End of variables declaration//GEN-END:variables
    
    // table model
    private CropInfoTableModel model;
    
    Preferences prefs = Preferences.userNodeForPackage(CropInfoFrame.class);
    File lastOpenFile;
}
